---
- hosts: dk
  become_user: root

  tasks:
   - name: docker info
     command: docker node inspect self --pretty
     become: true
     register: docker_info
     ignore_errors: yes
     no_log: true
 
   - set_fact:
       swarm_lead: "{{ inventory_hostname }}"
     no_log: true
     when: docker_info.stdout_lines.10 == " Leader:\t\tYes"
     
   - debug: msg=" Leader is {{ swarm_lead }}"
     delegate_to: "{{ swarm_lead }}"
     
     
   - name: checking swarm status
     shell: 'docker info | grep Swarm'
     become: true
     delegate_to: "{{ swarm_lead }}"
     register: swarm_stat

   - debug: msg=" docker swarm is {{ swarm_stat.stdout_lines }}"
   
   - name: stopping docker service
     shell: systemctl stop docker
     become: true
     register: docker_status
     delegate_to: "{{ item }}"
     when: "( item != swarm_lead )"
     with_inventory_hostnames:
      - dk

   - include: update.yml
   
   - name: Put SELinux in permissive mode.
     selinux:
      policy: targeted
      state: permissive
     become: true

   - include: reboot.yml
   
   - name: stopping docker service on leader
     shell: systemctl stop docker
     become: true
     register: docker_status
     delegate_to: "{{ swarm_lead }}"
   
   - name: reboot docker leader node
     reboot:
       reboot_timeout: 1800
     become: true
     delegate_to: "{{ swarm_lead }}"


   - name: wait for leader to finish reboot
     wait_for:
       port: "{{ (ansible_port|default(ansible_ssh_port))|default(22) }}"
       host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
       search_regex: OpenSSH
       delay: 20
     connection: local
     delegate_to: "{{ swarm_lead }}"

   - name: Check the uptime post reboot
     shell: uptime
     register: UPTIME
     delegate_to: "{{ swarm_lead }}"

   - debug: msg={{UPTIME.stdout}}
